// Get length of null terminated C string
// Returns length
let int32 _StrLen(int8* str) = {
    let int32 len = 0;
    while(@(str + len) != (0 as int8))
        len = len + 1;
    return len;
}
let int32 Length(this int8*) = {
    return _StrLen(this);
}


// Copy one C string to another
// Returns destination string
let int8* _StrCpy(int8* dest, int8* source) = {
    let int32 length = _StrLen(source);

    while(length > 0) {
        @dest = @source;

        dest += 1;
        source += 1;
        length -= 1;
    }
    return dest;
}
let int8* Copy(this int8*, int8* source) = {
    return _StrCpy(this, source);
}


// Concatenate 2 C strings together
// Returns destination string
let int8* _StrCat(int8* dest, int8* source) = {
    let int32 length = _StrLen(dest);
    return _StrCpy(dest + length, source);
}
let int8* Cat(this int8*, int8* source) = {
    return _StrCat(this, source);
}


// Compare 2 C strings
// Returns 0 if equal, other value if not equal
let int32 _StrCmp(int8* left, int8* right) = {
    let int32 leftLength = _StrLen(left);
    if(leftLength != _StrLen(right))
        return 1;
    
    while(leftLength > 0) {
        if(@left != @right)
           return (@left - @right) as int32;
        else {
            left += 1;
            right += 1;
            leftLength -= 1;
        }
    }

    return 0;
}
let int32 Compare(this int8*, int8* other) = {
    return _StrCmp(this, other);
}


// Finds first occurrence of character in C string
// Returns pointer to character, or nullptr value if not found
let int8* _StrChr(int8* str, int8 ch) = {
    let int32 length = _StrLen(str);
    while(length > 0) {
        if(@str == ch)
            return str;
        
        str += 1;
        length -= 1;
    }
    return 0 as int8*;
}
let int8* Find(this int8*, int8 ch) = {
    return _StrChr(this, ch);
}


// Standard string class
class String {
    int8* cStr;
    int32 size;

    String() = { // Default constructor for empty string
        this.cStr = _MemAlloc(1);
        this.size = 0;
    }

    String(int8* cStr) = { // Constructor for string literal or other C string
        if(cStr == 0 as int8*) { // If 
            this.cStr = 0 as int8*;
            this.size = 0;
        }
        else {
            this.cStr = _MemAlloc(cStr.Length() + 1);
            _StrCpy(this.cStr, cStr);
            this.size = cStr.Length();
        }
    }


    // Concatenate 2 strings together
    String cat(String other) = {
        let String result = new String(0 as int8*); // Create a completely empty string object
        result.cStr = _MemAlloc(this.size + other.size + 1);
        _StrCpy(result.cStr, this.cStr);
        _StrCat(result.cStr, other.cStr);
        result.size = this.size + other.size;
        return result;
    }
}